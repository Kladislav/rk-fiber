// Copyright (c) 2021 rookie-ninja
//
// Use of this source code is governed by an Apache-style
// license that can be found in the LICENSE file.

// Package rkfibermeta is a middleware of fiber framework for adding metadata in RPC response
package rkfibermeta

import (
	"context"
	"github.com/gofiber/fiber/v2"
	"github.com/rookie-ninja/rk-common/common"
	"github.com/rookie-ninja/rk-entry/entry"
	"github.com/rookie-ninja/rk-fiber/interceptor"
	"github.com/rookie-ninja/rk-fiber/interceptor/context"
	"time"
)

// Interceptor will add common headers as extension style in http response.
// The key is defined as bellow:
// 1: X-Request-Id: Request id generated by interceptor.
// 2: X-<Prefix-App: Application name.
// 3: X-<Prefix>-App-Version: Version of application.
// 4: X-<Prefix>-App-Unix-Time: Unix time of current application.
// 5: X-<Prefix>-Request-Received-Time: Time of current request received by application.
func Interceptor(opts ...Option) fiber.Handler {
	set := newOptionSet(opts...)

	return func(ctx *fiber.Ctx) error {
		ctx.SetUserContext(context.WithValue(ctx.UserContext(), rkfiberinter.RpcEntryNameKey, set.EntryName))

		requestId := rkcommon.GenerateRequestId()

		ctx.Response().Header.Set(rkfiberctx.RequestIdKey, requestId)

		event := rkfiberctx.GetEvent(ctx)
		event.SetRequestId(requestId)
		event.SetEventId(requestId)

		ctx.Response().Header.Set(set.AppNameKey, rkentry.GlobalAppCtx.GetAppInfoEntry().AppName)
		ctx.Response().Header.Set(set.AppVersionKey, rkentry.GlobalAppCtx.GetAppInfoEntry().Version)

		now := time.Now()
		ctx.Response().Header.Set(set.AppUnixTimeKey, now.Format(time.RFC3339Nano))
		ctx.Response().Header.Set(set.ReceivedTimeKey, now.Format(time.RFC3339Nano))

		return ctx.Next()
	}
}
